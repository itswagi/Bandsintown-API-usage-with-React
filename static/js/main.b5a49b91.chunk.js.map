{"version":3,"sources":["components/DisplayProfile/DisplayProfile.js","components/DisplayList/DisplayList.js","components/Search/Search.js","components/DisplayEvents/DisplayEvents.js","components/DisplayEventsList/DisplayEventsList.js","util/Api.js","components/App/App.js","serviceWorker.js","index.js"],"names":["DisplayProfile","className","src","this","props","artist","image_url","alt","name","href","facebook","React","Component","DisplayList","map","artists","undefined","id","key","Search","state","handleSearchQuery","bind","handleSearch","pressEnter","event","artistName","target","value","replace","setState","searchApi","preventDefault","placeholder","onChange","onKeyUp","onClick","DisplayEvents","events","date","split","venue","city","country","formatDate","DisplayEventsList","eventsList","app_id","url","Api","fetch","then","response","ok","json","error","console","log","jsonResponse","thumb_url","facebook_page_url","catch","EventApi","status","Promise","reject","datetime","App","profiles","display","apiCallFinished","callEvents","handleClick","Alert","noEvent","length","style","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.b5a49b91.chunk.js","sourcesContent":["import React from 'react';\r\nimport './DisplayProfile.css';\r\n\r\n//Template to display artist information as passed in props from DisplayEventsList\r\n//incoming props name is artist containing artist information\r\nclass DisplayProfile extends React.Component{\r\n  render(){\r\n    return (\r\n\r\n      <div className=\"profile\"> {/*Main Container*/}\r\n        <div className=\"image\"> {/*Displays artist image*/}\r\n          <img src={this.props.artist.image_url} alt={this.props.artist.name} />\r\n        </div>\r\n        <div className=\"information\"> {/*Displays artist name, and facebook url*/}\r\n          <h2>{this.props.artist.name}</h2>\r\n          <a href={this.props.artist.facebook}>{this.props.artist.facebook}</a>\r\n        </div>\r\n        <div className=\"showEvents\">\r\n          <p>View Events</p>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default DisplayProfile;\r\n","import React from 'react';\r\nimport './DisplayList.css';\r\nimport DisplayProfile from '../DisplayProfile/DisplayProfile';\r\n\r\n\r\n//DisplayList dynamically renders artist profiles depending on how many artist were retrieved from Api\r\n//Receives artist information in artist props from App Component stored in state.profiles of App component\r\nclass DisplayList extends React.Component{\r\n  render(){\r\n    return(\r\n\r\n      <div className=\"DisplayList\"> {/*Main Container*/}\r\n      {\r\n        this.props.artist.map( artists => {\r\n          {/*checks if artist information present or not, displays Artist not found message else displays Artist's profile also sets key for map to work correctly*/}\r\n          if (artists.id === undefined || artists.id === null) {\r\n            return <span key={1}>Artist Not Found</span>\r\n          }else{\r\n            return <DisplayProfile artist={artists} key={artists.id}/>\r\n          }\r\n        })\r\n      }\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default DisplayList;\r\n","import React from 'react';\r\nimport './Search.css';\r\n\r\n//This componennt renders the search bar and sends information to Api\r\nclass Search extends React.Component{\r\n  constructor(props){\r\n    super(props);\r\n    this.state = {artist:''}; //Stores artist name\r\n    this.handleSearchQuery = this.handleSearchQuery.bind(this);\r\n    this.handleSearch = this.handleSearch.bind(this);\r\n    this.pressEnter = this.pressEnter.bind(this)\r\n  }\r\n  //Handles artist name entered in search bar and saves it in state.artist\r\n  handleSearchQuery(event){\r\n    const artistName = event.target.value.replace(\" \", \"%20\") //Ensures no space in name, if there are, replaces that by %20 for url to work\r\n    this.setState({artist: artistName}) //sets artist state to artist name entered in search bar\r\n  }\r\n  //handles clicking enter to search for artist\r\n  handleSearch(event){\r\n    //sends artist name as props to App Component which will send name to api\r\n    this.props.searchApi(this.state.artist)\r\n    event.preventDefault() //prevents default action occuring on clicking search button\r\n  }\r\n  //Handles pressing enter when artist name is entered for search\r\n  pressEnter(event){\r\n    if(event.key === 'Enter'){\r\n      this.handleSearchQuery(event)\r\n      this.handleSearch(event)\r\n    }\r\n  }\r\n  render(){\r\n    return(\r\n      <div className=\"searchcontainer\"> {/*Main container*/}\r\n          <input placeholder=\"Search Artist...\" onChange={this.handleSearchQuery} onKeyUp={this.pressEnter}/> {/*SearchBar*/}\r\n          <div className=\"search-submit\"> {/*Submit button*/}\r\n            <a onClick={this.handleSearch}>Search</a>\r\n          </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Search;\r\n","import React from 'react';\r\nimport './DisplayEvents.css';\r\n\r\n//DisplayEvents Component that forms the basic template for displaying events\r\n//Receives events props from DisplayEventsList Component which contains event information\r\nclass DisplayEvents extends React.Component{\r\n  //Checks date format and correctly display it\r\n  formatDate(){\r\n    return this.props.events.date.split('T')[0]\r\n  }\r\n  render(){\r\n    return (\r\n      <div className=\"eventscontainer\"> {/*Main container*/}\r\n        <div className=\"events\">  {/*Display text: Event Details*/}\r\n          <h2>Event Details</h2>\r\n          <div className=\"eventdetailcontainer\">  {/* sub container to display retrieved information about events*/}\r\n            <div className=\"eventdetail\">\r\n              <h3>Venue</h3>\r\n              <p>{this.props.events.venue}</p> {/*Displays Venue*/}\r\n            </div>\r\n            <div className=\"eventdetail\">\r\n              <h3>City</h3>\r\n              <p>{this.props.events.city}</p> {/*Display City*/}\r\n            </div>\r\n          </div>\r\n          <div className=\"eventdetailcontainer\">\r\n            <div className=\"eventdetail\">\r\n              <h3>Country</h3>\r\n              <p>{this.props.events.country}</p> {/*Display Country*/}\r\n            </div>\r\n            <div className=\"eventdetail\">\r\n              <h3>Date</h3>\r\n              <p>{this.formatDate()}</p> {/*Display Date*/}\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default DisplayEvents;\r\n","import React from 'react';\r\nimport './DisplayEventsList.css';\r\nimport DisplayEvents from '../DisplayEvents/DisplayEvents';\r\n\r\n\r\n//DisplayEventsList Component renders dynamically renders events from events template in DisplayEvents Component\r\n//Receives eventslist props from App Component containing events list as stored in state.events of App Component\r\nclass DisplayEventsList extends React.Component{\r\n  render(){\r\n\r\n    return(\r\n      <div className=\"DisplayEventsList\"> {/*Main Container*/}\r\n        { /*using map function to iterate through as many events were retrieved and\r\n          render that many DisplayEvents Components  with respective event information\r\n          also sets key for map to work*/\r\n          this.props.eventsList.map( events => {\r\n          return <DisplayEvents events={events} key={events.id}/>\r\n        }) \r\n        }\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default DisplayEventsList;\r\n","//Url and app_id tp communicate with bandsintown api\r\nconst app_id = 'string';\r\nconst url = 'https://cors-anywhere.herokuapp.com/https://rest.bandsintown.com/artists/';\r\n\r\n//Retreive artist information only using async await fetch prpmises\r\nexport const Api = {\r\n  async search(artist){\r\n    return await fetch(`${url}${artist}?app_id=${app_id}`, )  //sends request for artist information\r\n    .then(response => { //on receiving response from api\r\n      try{  //check for valid response\r\n        if(response.ok){\r\n          return response.json(); //convert response to a json response\r\n        }\r\n      }catch(error){  //catch any errors and log to console\r\n        console.log(error)\r\n      }\r\n    })\r\n    .then(jsonResponse => {\r\n        try{ //returns only needed information from jsonResponse\r\n          return jsonResponse.map(artist => ({  //if many artists were returned\r\n            id: artist.id,\r\n            name: artist.name,\r\n            image_url: artist.thumb_url,\r\n            facebook: artist.facebook_page_url\r\n          }))\r\n        }catch(error){\r\n          return {  //if single artist was returned\r\n            id: jsonResponse.id,\r\n            name: jsonResponse.name,\r\n            image_url: jsonResponse.thumb_url,\r\n            facebook: jsonResponse.facebook_page_url\r\n          }\r\n        }\r\n    }).catch(error => { //catch if artist doesn't exist in bandsintown's database\r\n      return {\r\n        id: null,\r\n      }\r\n    })\r\n  }\r\n}\r\n\r\n//Separate call for artist's events\r\nexport const EventApi = {\r\n  async search(artist){\r\n    return await fetch(`${url}${artist}/events?app_id=${app_id}`) //send query to bandsintown\r\n      .then(response => {\r\n        try{  //check response\r\n          if(response.ok){ //convert to json is response is valid\r\n            return response.json();\r\n          }else if(response.status === 404){\r\n            return Promise.reject('error 404')\r\n          }\r\n        }catch(error){  //catch errors if bad response\r\n          console.log(error)\r\n        }\r\n      })\r\n      .then(jsonResponse => {\r\n        try{  //only return needed event information from json data\r\n          return jsonResponse.map( event => ( //if many events\r\n            {\r\n              id: event.id,\r\n              venue: event.venue.name,\r\n              city: event.venue.city,\r\n              country: event.venue.country,\r\n              date: event.datetime,\r\n            }\r\n          ))\r\n        }catch(error){\r\n          return {  //if only one event, map wont work, so separate code for that below\r\n              id: jsonResponse.id,\r\n              venue: jsonResponse.venue.name,\r\n              city: jsonResponse.venue.city,\r\n              country: jsonResponse.venue.country,\r\n              date: jsonResponse.datetime,\r\n            }\r\n        }\r\n        }\r\n      ).catch( error => { return []})\r\n    }\r\n}\r\n","//Imports\r\nimport React from 'react';\r\nimport './App.css';\r\nimport DisplayList from '../DisplayList/DisplayList'\r\nimport Search from '../Search/Search';\r\nimport DisplayEventsList from '../DisplayEventsList/DisplayEventsList'\r\nimport {Api} from '../../util/Api';\r\nimport {EventApi} from '../../util/Api';\r\n\r\n//Main Component\r\nclass App extends React.Component {\r\n  constructor(props){\r\n    super(props);\r\n    this.state = {\r\n      profiles: [], //Stores artists profiles fetched from the API\r\n      events: [], //Stores events fetched from the API\r\n      display: 'hidden',  //Triggers visibility of DisplayEventsList Component\r\n      apiCallFinished: false, //Flag to check if API calls have been completed\r\n      callEvents: false //Flag to check if the program needs to call the EventApi for events list\r\n    };\r\n    this.searchApi = this.searchApi.bind(this);\r\n    this.handleClick = this.handleClick.bind(this);\r\n  }\r\n\r\n  //Perform API Calls and returns profiles and events in component state: profiles and events\r\n  searchApi(artist){\r\n    //Search for artist information and store result in state.profiles\r\n    Api.search(artist).then(profiles => {\r\n      this.setState({display: 'none'})  //Toggles CSS Style display property for DisplayEventsList Component\r\n      this.setState({profiles: [profiles]});  //Set state for storing retrieved profiles\r\n    });\r\n    //Search for event list and store result in state.events\r\n    EventApi.search(artist).then( events => {\r\n      this.setState({events: events, apiCallFinished: true}); //Set state for storing events and toggles state.apiCallFinished to signal end of api calls\r\n    });\r\n  }\r\n  //handleClick toggles CSS style display property of <div> encapsulating Alert which contains DisplayEventsList\r\n  handleClick(){\r\n    this.setState({display: 'flex'})\r\n  }\r\n\r\n  render(){\r\n    const noEvent = this.state.events.length //Stores number of events retrieved in noEvent\r\n    let Alert;\r\n    if(this.state.apiCallFinished && noEvent === 0){ //Toggles between showing DisplayEventsList or showng a message 'No Upcomming Event' depending on if events were retrieved\r\n        Alert = <span>No Upcomming Events</span>\r\n    }else{\r\n        Alert = <DisplayEventsList eventsList={this.state.events}/>\r\n    }\r\n\r\n    return (\r\n      <div className=\"mainContainer\"> {/*Container encapsulating all components*/}\r\n        <Search searchApi={this.searchApi}/> {/*Search Component that is passed searchApi method in props*/}\r\n        <div onClick={this.handleClick}>  {/*onClick toggles visibility of DisplayEventsList or Alert*/}\r\n        <DisplayList artist={this.state.profiles} /> {/*DisplayList Component that displays artist profiles*/}\r\n        </div>\r\n        <div style={{display: `${this.state.display}`}}> {/*Style of this div controlled by state.display*/}\r\n        {Alert} {/*Displays either DisplayEventsList or span element*/}\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}